# vim: syntax=bash
@options timing

@define FHTAGN_VERSION 'v0.1.1'
@define FHTAGN_URL     "https://github.com/xonixx/fhtagn/raw/$FHTAGN_VERSION/fhtagn.awk"
@define JSONTestSuite_REPO 'https://github.com/nst/JSONTestSuite'
@define GOAWK_VERSION '1.25.0'
@define GOAWK         "goawk$GOAWK_VERSION"
@define AWK 'awk'

@goal soft_folder_created @private
@reached_if [[ -d "soft" ]]
  mkdir soft

@define FHTAGN "soft/fhtagn.awk"

@goal fhtagn_installed @private
@depends_on soft_folder_created
@reached_if [[ -x "$FHTAGN" ]]
  if command -v wget >/dev/null
  then
    wget "$FHTAGN_URL" -O"$FHTAGN"
  elif command -v curl >/dev/null
  then
    curl -L "$FHTAGN_URL" -o "$FHTAGN"
  else
    echo "can't dl fhtagn"
    exit 2
  fi
  chmod +x "$FHTAGN"

@goal JSONTestSuite_installed @private
@depends_on soft_folder_created
@reached_if [[ -d "soft/JSONTestSuite" ]]
  echo
  echo "Fetching JSONTestSuite..."
  echo

  cd "soft"

  wget $JSONTestSuite_REPO/archive/master.tar.gz -O- \
    | tar xzvf - JSONTestSuite-master/test_parsing JSONTestSuite-master/test_transform
  mv JSONTestSuite-master JSONTestSuite

@goal test_suite_mawk134
@depends_on installed_mawk134
@depends_on test_suite @args './soft/mawk134'

@goal test_suite_bwk
@depends_on installed_bwk
@depends_on test_suite @args './soft/bwk'

#@goal test_suite_busybox
#@depends_on installed_busybox
#@depends_on test_suite @args './soft/busybox awk'

@goal test_suite_goawk
@depends_on installed_goawk
@depends_on test_suite @args "./soft/$GOAWK"

@goal test_suite @params AWK @private
@doc 'runs json suite'
@depends_on JSONTestSuite_installed
  export AWK
  ./run_json_test_suit.awk

@goal cleaned_soft @private
@reached_if [[ ! -d "soft" ]]
  rm -r "soft"

@goal cleaned @private
@depends_on cleaned_soft

@goal debug @private
  case "$AWK" in
    *busybox*) $AWK --help 2>&1 | head -n 1
            ;;
    *mawk*) $AWK -W version 2>&1 | head -n 1
            ;;
         *) $AWK --version | head -n 1
            ;;
  esac
  bash --version| head -n 1

@goal debug_pg @params AWK @private
  printf '%s: ' "$AWK"
  case "$AWK" in
    *busybox*) $AWK --help 2>&1 | head -n 1
            ;;
    *mawk*) $AWK -W version 2>&1 | head -n 1
            ;;
         *) $AWK --version | head -n 1
            ;;
  esac


@goal prepared4tests @private
@depends_on fhtagn_installed debug

@lib
  run_test_file() {
    local f="$1"

    if "./$FHTAGN" "$f"
    then
      echo "TESTS PASSED : $f"
    else
      echo >&2 "!!! TESTS FAILED !!! : $f"
      exit 1
    fi
  }

@goal @glob '*.tush' @params AWK @private
@depends_on fhtagn_installed
@depends_on debug_pg @args AWK
@use_lib
  run_test_file "$ITEM"

@goal tested_json_suite
@doc 'tests json suite'
@depends_on prepared4tests
@depends_on JSONTestSuite_installed
@depends_on installed_mawk134
@use_lib
  AWK="$(pwd)/soft/mawk134" run_test_file "run_json_test_suit.tush.txt"

@goal tested_json_suite_coverage @private
@doc 'tests json suite for coverage'
@depends_on prepared4tests
@depends_on JSONTestSuite_installed
@use_lib
  run_test_file "run_json_test_suit_coverage.tush.txt"

@goal tested
@doc 'run tests'
@depends_on '*.tush' @args 'awk'

@define COVERPROFILE "/tmp/cov.txt"

@goal coverage
@doc 'run tests with coverage'
@depends_on _cover_profile_prepared
  go tool cover -html="$COVERPROFILE"

@goal _cover_profile_deleted @private
  rm -f "$COVERPROFILE"

@goal _cover_profile_prepared @private
@depends_on installed_goawk
@depends_on _cover_profile_deleted
  ./makesure tested tested_json_suite_coverage -D AWK="$(pwd)/soft/$GOAWK -covermode=set -coverappend -coverprofile=$COVERPROFILE"

@goal coverage_badge_updated
@doc 'updates code coverage badge'
@depends_on _cover_profile_prepared
  html='/tmp/cov.html'
  go tool cover -html="$COVERPROFILE" -o "$html"
  coverage="$(awk '/gron\.awk/ { if (match($0,/\(.+\)/)) print substr($0,RSTART+1,RLENGTH-2) }' "$html")"
  echo "coverage: $coverage"
  awk -v coverage="$coverage" '{ gsub(/\$COVERAGE/,coverage) } 1' coverage.tpl.svg > coverage.svg
  rm "$html"

@goal default
@doc 'same as tested'
@depends_on tested

@goal notrace @glob '*.awk'
  awk '$1 !~ /^trace\(/' "$ITEM"

#-------------------------------
@goal tested_awks
@doc tests with all awks
@depends_on tested
@depends_on tested_bwk
@depends_on tested_mawk133
@depends_on tested_mawk134
@depends_on tested_gawk @args '5.3.0' 'gawk530'
@depends_on tested_goawk
#@depends_on tested_goawk_branch
@depends_on tested_busybox

@goal tested_bwk @private
@depends_on installed_bwk
@depends_on '*.tush' @args './soft/bwk'

@goal tested_mawk133 @private
@depends_on installed_mawk133
@depends_on '*.tush' @args './soft/mawk133'

@goal tested_mawk134 @private
@depends_on installed_mawk134
@depends_on '*.tush' @args './soft/mawk134'

@goal tested_gawk @params VERSION EXE_NAME @private
@depends_on installed_gawk @args VERSION EXE_NAME
@depends_on '*.tush' @args "./soft/$EXE_NAME" # TODO GRON_AWKLIBPATH
#  ./makesure -D AWK="$(pwd)/soft/${EXE_NAME}" -D GRON_AWKLIBPATH="$(pwd)/soft/${EXE_NAME}_libs" tested

@goal tested_goawk @private
@depends_on installed_goawk
@depends_on '*.tush' @args "./soft/$GOAWK"

@goal tested_goawk_branch @private
@depends_on installed_goawk_branch
@depends_on '*.tush' @args "./soft/$GOAWK_BRANCH_EXE"

@goal tested_busybox @private
@reached_if [[ "$OSTYPE" != "linux-gnu"* ]] # only test busybox awk on linux
@depends_on installed_busybox
@depends_on '*.tush' @args "./soft/busybox awk"

@goal tested_jawk @private
@depends_on installed_jawk
@depends_on '*.tush' @args "java -jar ./soft/$JAWK_JAR"

#-------------------------------

@goal installed_awks
@doc 'installs all awks into ./soft'
@depends_on installed_bwk
@depends_on tested_gawk @args '5.2.2' 'gawk522'
@depends_on installed_mawk134
@depends_on installed_goawk

@goal installed_bwk @private
@reached_if [[ -f soft/bwk ]]
@depends_on soft_folder_created
  echo
  echo "Fetching BWK..."
  echo

  cd "soft"

  wget https://github.com/onetrueawk/awk/archive/refs/heads/master.tar.gz -Obwk.tar.gz
  tar xzvf bwk.tar.gz
  rm bwk.tar.gz

  echo
  echo "Compile BWK..."
  echo

  cd "awk-master"

  make

  mv a.out ../bwk

  cd ..
  ./bwk --version
  rm -r awk-master

@goal installed_gawk @params VERSION EXE_NAME @private
@reached_if [[ -f soft/"$EXE_NAME" ]]
@depends_on soft_folder_created
    echo
    echo "Fetching Gawk-$VERSION..."
    echo

    cd "soft"

    G=gawk-$VERSION.tar.gz
    dlUrl="http://git.savannah.gnu.org/cgit/gawk.git/snapshot/$G"
    dlFolder="gawk-$VERSION"
    wget "$dlUrl"
    tar "${tarOpts:-xzvf}" "$G"
    rm "$G"

    echo
    echo "Compile Gawk-$VERSION..."
    echo

    cd "$dlFolder"

    ./configure
    make
    # make check

    mv gawk ../$EXE_NAME
    mkdir ../${EXE_NAME}_libs
    mv extension/.libs/*.so ../"${EXE_NAME}"_libs # for AWKLIBPATH

    cd ..
    ./$EXE_NAME --version
    rm -r "$dlFolder"

@lib mawk
  install_mawk() {
    local version="$1"
    local tgz="$2"

    local exeName="mawk${version//./}"

    echo
    echo "Fetching Mawk $version..."
    echo

    cd "soft"

    wget "https://invisible-island.net/archives/mawk/$tgz"
    tar xzvf "$tgz"
    rm "$tgz"

    echo
    echo "Compile Mawk $version..."
    echo

    cd mawk-"$version"-*

    ./configure && make

    mv mawk ../$exeName

    cd ..
    ./$exeName -W version
    rm -r mawk-"$version"-*
  }

@goal installed_mawk133 @private
@reached_if [[ -f soft/mawk133 ]]
@depends_on soft_folder_created
@use_lib mawk
    if   [[ "$OSTYPE" == "linux-gnu"* ]]; then
      install_mawk 1.3.3 'mawk-1.3.3-20080909.tgz' # this one doesn't compile on macos
    elif [[ "$OSTYPE" == "darwin"* ]]; then
      install_mawk 1.3.3 'mawk-1.3.3-20090920.tgz'
    else
      >&2 echo "Unknown OS"
      exit 1
    fi

@goal installed_mawk134 @private
@reached_if [[ -f soft/mawk134 ]]
@depends_on soft_folder_created
@use_lib mawk
  install_mawk 1.3.4 'mawk-1.3.4-20200120.tgz'

@goal installed_busybox @private
@reached_if [[ -x ./soft/busybox ]]
  wget 'https://busybox.net/downloads/binaries/1.31.0-i686-uclibc/busybox' -O ./soft/busybox
  chmod +x ./soft/busybox
  echo "Installed: $(./soft/busybox | head -n 1)"

@define JAWK_VER '3.1.00'
@define JAWK_JAR "jawk-$JAWK_VER-standalone.jar"

@goal installed_jawk @private
@reached_if [[ -e ./soft/"$JAWK_JAR" ]]
  wget "https://github.com/sentrysoftware/Jawk/releases/download/v$JAWK_VER/$JAWK_JAR" -O ./soft/"$JAWK_JAR"

@goal installed_goawk @private
@reached_if [[ -f soft/$GOAWK ]]
@depends_on soft_folder_created
  echo
  echo "Fetching GoAWK $GOAWK_VERSION ..."
  echo

  cd "soft"

  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    os="linux"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    os="darwin"
  else
    >&2 echo "Unknown OS"
    exit 1
  fi

  F=goawk_v${GOAWK_VERSION}_${os}_amd64.tar.gz
  wget "https://github.com/benhoyt/goawk/releases/download/v$GOAWK_VERSION/$F"
  tar xzvf "$F" goawk
  rm "$F"

  mv goawk $GOAWK
  "./$GOAWK" --version

@define GOAWK_BRANCH     'bytecode'
@define GOAWK_BRANCH_EXE "goawk_$GOAWK_BRANCH"

@goal installed_goawk_branch @private
@reached_if [[ -f soft/$GOAWK_BRANCH_EXE ]]
@depends_on soft_folder_created
  echo
  echo "Installing GoAWK branch=$GOAWK_BRANCH ..."
  echo

  cd "soft"

  zip="https://github.com/benhoyt/goawk/archive/refs/heads/$GOAWK_BRANCH.zip"
  curl -L "$zip" -o "$GOAWK_BRANCH.zip"
  yes | unzip "$GOAWK_BRANCH.zip"
  cd "goawk-$GOAWK_BRANCH"
  ~/soft/go1.17/bin/go build # TODO go path
  mv goawk ../"$GOAWK_BRANCH_EXE"

  cd ..
  ./"$GOAWK_BRANCH_EXE" --version
  rm -r "goawk-$GOAWK_BRANCH" "$GOAWK_BRANCH.zip"

@goal timeit
@depends_on installed_awks
  for AWK in gawk51 mawk134 "$GOAWK -b" "$GOAWK_BRANCH_EXE -b" bwk
  do
    echo
    echo "====================="
    echo "Benchmarking $AWK ..."
#    time ./soft/$AWK -f gron.awk test_data/big.json | ./soft/$AWK -f gron.awk - -u > /dev/null
    time ./soft/$AWK -f gron.awk test_data/big.json | wc -l
  done
